(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

/*
*
*	
*	Copyright 2014 - GifMe.io	
*
*
 */
var GifmeMenu, menu,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

GifmeMenu = (function() {
  function GifmeMenu() {
    this.error = __bind(this.error, this);
    this.check_user = __bind(this.check_user, this);
    this.fetch_gyf = __bind(this.fetch_gyf, this);
    this.save_vine = __bind(this.save_vine, this);
    this.save_twitter = __bind(this.save_twitter, this);
    this.save_image = __bind(this.save_image, this);
    this.select_image = __bind(this.select_image, this);
    this.u = null;
    this.auto_tag = false;
    this.endpoint = "http://166.78.184.106";
    this.downloading = 0;
    this.check_user();
  }

  GifmeMenu.prototype.select_image = function(info, tab) {
    var d, url;
    this.check_user();
    if (this.u) {
      url = info.srcUrl;
      d = 1;
      this.downloading = setInterval((function(_this) {
        return function() {
          var image;
          image = 'images/downloading/' + d + '.png';
          chrome.browserAction.setIcon({
            'path': image
          });
          if (d > 13) {
            d = 0;
          }
          return d = d + 1;
        };
      })(this), 50);
      if (info.mediaType === "video") {
        console.log(url);
        if (url.match(/gfycat.com/i)) {
          url = url.split("/");
          return this.fetch_gyf(url, (function(_this) {
            return function(data) {
              return _this.save_image(data);
            };
          })(this));
        } else if (url.match(/pbs.twimg.com/i)) {
          return this.save_twitter(url);
        } else if (url.match(/vine.co/i)) {
          return this.save_vine(url);
        } else {
          alert("Sorry there is not a Gif source for this video! Try Gfycat!");
          return this.error();
        }
      } else {
        return this.save_image(url);
      }
    } else {
      alert("You need to register an account to use GifMe!");
      return this.error();
    }
  };

  GifmeMenu.prototype.save_image = function(url) {
    if (!url.match(/jpg|gif|GIF|JPEG|JPG|png|PNG/i)) {
      url = url.slice(0, -1) + ".gif";
    }
    return $.ajax({
      url: this.endpoint + '/gif/create/' + this.u,
      type: "POST",
      data: "url=" + url,
      crossDomain: true,
      success: (function(_this) {
        return function(msg) {
          var tags;
          if (msg.status === "301") {
            alert(msg.message);
            _this.error();
          } else {
            chrome.browserAction.setBadgeText({
              'text': "1"
            });
            chrome.browserAction.setIcon({
              'path': 'images/icon_48.png'
            });
            tags = prompt("Tag This Gif: ( use spaces between tags )", "");
            console.log(msg);
            $.ajax({
              url: _this.endpoint + "/user/" + _this.u + "/tag",
              type: "POST",
              data: 'tag=' + encodeURIComponent(tags) + "&gif=" + msg.gif.id,
              crossDomain: true,
              timeout: 10000
            });
          }
          return clearInterval(_this.downloading);
        };
      })(this),
      error: (function(_this) {
        return function(w, t, f) {
          return _this.error();
        };
      })(this)
    });
  };

  GifmeMenu.prototype.save_twitter = function(url) {
    return $.ajax({
      url: this.endpoint + '/gif/twitter/convert/' + this.u,
      type: "POST",
      data: "url=" + url,
      crossDomain: true,
      success: (function(_this) {
        return function(msg) {
          var tags;
          if (msg.status === "301") {
            alert(msg.message);
            _this.error();
          } else {
            chrome.browserAction.setBadgeText({
              'text': "1"
            });
            chrome.browserAction.setIcon({
              'path': 'images/icon_48.png'
            });
            tags = prompt("Tag This Gif: ( use spaces between tags )", "");
            console.log(msg);
            $.ajax({
              url: _this.endpoint + "/user/" + _this.u + "/tag",
              type: "POST",
              data: 'tag=' + encodeURIComponent(tags) + "&gif=" + msg.gif.id,
              crossDomain: true,
              timeout: 10000
            });
          }
          return clearInterval(_this.downloading);
        };
      })(this),
      error: (function(_this) {
        return function(w, t, f) {
          return _this.error();
        };
      })(this)
    });
  };

  GifmeMenu.prototype.save_vine = function(url) {
    return $.ajax({
      url: this.endpoint + '/gif/vine/convert/' + this.u,
      type: "POST",
      data: "url=" + url,
      crossDomain: true,
      success: (function(_this) {
        return function(msg) {
          var tags;
          if (msg.status === "301") {
            alert(msg.message);
            _this.error();
          } else {
            chrome.browserAction.setBadgeText({
              'text': "1"
            });
            chrome.browserAction.setIcon({
              'path': 'images/icon_48.png'
            });
            tags = prompt("Tag This Gif: ( use spaces between tags )", "");
            console.log(msg);
            $.ajax({
              url: _this.endpoint + "/user/" + _this.u + "/tag",
              type: "POST",
              data: 'tag=' + encodeURIComponent(tags) + "&gif=" + msg.gif.id,
              crossDomain: true,
              timeout: 10000
            });
          }
          return clearInterval(_this.downloading);
        };
      })(this),
      error: (function(_this) {
        return function(w, t, f) {
          return _this.error();
        };
      })(this)
    });
  };

  GifmeMenu.prototype.fetch_gyf = function(url, callback) {
    var u, _url;
    _url = url[url.length - 1].split(".");
    u = _url[0];
    return $.ajax({
      url: 'http://gfycat.com/cajax/get/' + u,
      success: (function(_this) {
        return function(data) {
          return callback(data.gfyItem.gifUrl);
        };
      })(this)
    });
  };

  GifmeMenu.prototype.check_user = function() {
    return chrome.storage.sync.get('gifme_uuid', (function(_this) {
      return function(msg) {
        return _this.u = msg.gifme_uuid;
      };
    })(this));
  };

  GifmeMenu.prototype.error = function() {
    alert("Oh Snap! Something went wrong. We've logged the issue and will be looking into it. Please try again.");
    chrome.browserAction.setBadgeText({
      'text': "!"
    });
    chrome.browserAction.setIcon({
      'path': 'images/icon_48.png'
    });
    return clearInterval(this.downloading);
  };

  return GifmeMenu;

})();

menu = new GifmeMenu();


/*
*
*	
*	Chrome Specific	
*
*
 */

chrome.contextMenus.onClicked.addListener(menu.select_image);

chrome.runtime.onInstalled.addListener((function(_this) {
  return function() {
    chrome.contextMenus.create({
      "title": "GifMe",
      "contexts": ["image"],
      "id": "GifMeContextMenu"
    });
    return chrome.contextMenus.create({
      "title": "GifMe",
      "contexts": ["video"],
      "id": "GifMeContextMenuVideo"
    });
  };
})(this));

chrome.storage.onChanged.addListener((function(_this) {
  return function(changes, namespace) {
    var key, storageChange, u, _i, _len;
    for (_i = 0, _len = changes.length; _i < _len; _i++) {
      key = changes[_i];
      storageChange = changes[key];
      u = storageChange.newValue;
      console.log(storageChange);
    }
    return chrome.tabs.getSelected(null, function(tab) {
      var code;
      code = 'window.location.reload();';
      return chrome.tabs.executeScript(tab.id, {
        code: code
      });
    });
  };
})(this));


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
